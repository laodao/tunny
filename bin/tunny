/**
 * @author lonun
 */
var exec = require('child_process').exec
  , program = require('commander')
  , mkdirp = require('mkdirp')
  , pkg = require('../package.json')
  , version = pkg.version
  , os = require('os')
  , fs = require('fs');

program
  .version(version)
  .parse(process.argv);

var path = program.args.shift() || '.';
var eol = 'win32' == os.platform() ? '\r\n' : '\n';
var app = ['var app = require(\'tunny\');', 'app.createServer();'].join(eol);

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);

function createApplicationAt(path) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log(' install dependencies:');
    console.log(' $ cd %s && npm install', path);
    console.log();
    console.log(' run the app:');
    console.log(' $ node app');
    console.log();
  });

  mkdir(path, function(){
    mkdir(path + '/static');
    mkdir(path + '/static/js');
    mkdir(path + '/static/images');
    mkdir(path + '/static/css');

    mkdir(path + '/app');
    mkdir(path + '/model');
    mkdir(path + '/plugins');
    mkdir(path + '/interceptor');
    //mkdir(path + '/filter');

    mkdir(path + '/html');

    mkdir(path + '/views');

    write(path + '/app.js', app);
  });
}

/**
* Check if the given directory `path` is empty.
*
* @param {String} path
* @param {Function} fn
*/
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
* echo str > path.
*
* @param {String} path
* @param {String} str
*/
function write(path, str) {
  fs.writeFile(path, str);
  console.log(' \x1b[36mcreate\x1b[0m : ' + path);
}

/**
* Mkdir -p.
*
* @param {String} path
* @param {Function} fn
*/

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log(' \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
* Exit with the given `str`.
*
* @param {String} str
*/
function abort(str) {
  console.error(str);
  process.exit(1);
}
